fit_once <- function(df0, holdout_year, conditions, verbose = TRUE){
df0$set <- get_holdout_set(df0, holdout_year)
df0$pred <- NA
coef_results <- list()
sd_err <- list()
for(cond in conditions){
if(cond@warn) wrapper <- identity else wrapper <- suppressWarnings
wrapper(warning("AAAAA"))
warning("BBB")
fit <- wrapper(
lm(
cond@formula,
data = df0 %>% filter(condition == cond@name & set == "train")
)
)
sd_err[cond@name] <- sd(fit$residuals)
coef_results[[cond@name]] <- broom::tidy(fit) %>%
mutate(condition=cond@name)
df0$pred[df0$condition == cond@name] <- predict(
fit,
newdata = df0[df0$condition == cond@name,]
)
if(verbose) {
print(sprintf("%s Model", cond@name))
print(summary(fit))
}
}
## this is a noisy estimate, for when we bootstrap
sample <- df0 %>%
filter(set == 'test') %>%
mutate(
pred_samp = pred + rnorm(n(), mean=0, sd=unlist(sd_err[condition]))
) %>%
select(race, sth, condition, pred, pred_samp)
return(new(
"FitResult",
pred=df0[,c("sth", "year", "pred")],
coefs=do.call(rbind, coef_results),
test_sample=sample,
holdout_year=as.integer(holdout_year)
))
}
results_once <- fit_once(
vote_df,
2016,
conditions
)
fit_once <- function(df0, holdout_year, conditions, verbose = TRUE){
df0$set <- get_holdout_set(df0, holdout_year)
df0$pred <- NA
coef_results <- list()
sd_err <- list()
for(cond in conditions){
if(!cond@warn) wrapper <- suppressWarnings else wrapper <- identity
fit <- wrapper(
lm(
cond@formula,
data = df0 %>% filter(condition == cond@name & set == "train")
)
)
sd_err[cond@name] <- sd(fit$residuals)
coef_results[[cond@name]] <- broom::tidy(fit) %>%
mutate(condition=cond@name)
df0$pred[df0$condition == cond@name] <- predict(
fit,
newdata = df0[df0$condition == cond@name,]
)
if(verbose) {
print(sprintf("%s Model", cond@name))
print(summary(fit))
}
}
## this is a noisy estimate, for when we bootstrap
sample <- df0 %>%
filter(set == 'test') %>%
mutate(
pred_samp = pred + rnorm(n(), mean=0, sd=unlist(sd_err[condition]))
) %>%
select(race, sth, condition, pred, pred_samp)
return(new(
"FitResult",
pred=df0[,c("sth", "year", "pred")],
coefs=do.call(rbind, coef_results),
test_sample=sample,
holdout_year=as.integer(holdout_year)
))
}
results_once <- fit_once(
vote_df,
2016,
conditions
)
supplement_pred <- function(pred, holdout_year, df0=df){
pred_supplemented <- pred %>% left_join(
df0 %>%
mutate(set = get_holdout_set(., holdout_year)) %>%
select(sth, year, race, condition, set, sth_pctdem),
by = c("sth", "year")
)
if(!nrow(pred) == nrow(pred_supplemented)) stop("rows were duplicated")
return(pred_supplemented)
}
supplement_pred_from_fit <- function(fr, df0=df){
supplement_pred(fr@pred, fr@holdout_year, df0)
}
supplement_pred <- function(pred, holdout_year, df0=vote_df){
pred_supplemented <- pred %>% left_join(
df0 %>%
mutate(set = get_holdout_set(., holdout_year)) %>%
select(sth, year, race, condition, set, sth_pctdem),
by = c("sth", "year")
)
if(!nrow(pred) == nrow(pred_supplemented)) stop("rows were duplicated")
return(pred_supplemented)
}
supplement_pred_from_fit <- function(fr, df0=vote_df){
supplement_pred(fr@pred, fr@holdout_year, df0)
}
prediction_plot <- function(fr, condition_name){
if(!is(fr, "FitResult")) stop("fr must be of type FitResult")
if(!condition_name %in% unique(fr@coefs$condition)) {
stop("condition doesn't match available conditions")
}
ggplot(
fr %>%
supplement_pred_from_fit() %>%
filter(condition == condition_name),
aes(x = pred, y = sth_pctdem)
) +
geom_point() +
geom_abline(slope=1, intercept=0) +
facet_grid(~set) +
coord_fixed() +
ggtitle(sprintf("Predicted values of %s model, %s", condition_name, fr@holdout_year))
}
prediction_plot(results_once, "contested")
prediction_plot(results_once, "previously_uncontested")
prediction_plot(results_once, "uncontested")
setClass(
## BootstrapResult is like FitResult but dfs will have column `sim`
"BootstrapResult",
slots=c(
nboot="numeric"
),
contains="FitResult"
)
rbind_slots <- function(obj_list, result_slot, add_sim=TRUE){
n <- length(obj_list)
if(add_sim){
fn <- function(i) slot(obj_list[[i]], result_slot) %>% mutate(sim=i)
} else {
fn <- function(i) slot(obj_list[[i]], result_slot)
}
do.call(
rbind,
lapply(1:n, fn)
)
}
rbind_slots <- function(obj_list, result_slot, process_func=identity, ...){
n <- length(obj_list)
fn <- function(i) slot(obj_list[[i]], result_slot) %>% process_func(...)
do.call(
rbind,
lapply(1:n, fn)
)
}
rbind_slots <- function(obj_list, result_slot){
n <- length(obj_list)
fn <- function(i) slot(obj_list[[i]], result_slot) %>% mutate(sim=i)
do.call(
rbind,
lapply(1:n, fn)
)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl, add_sim=TRUE)
}
return(bs)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl)
}
return(bs)
}
bootstrap <- function(df0, holdout_year, conditions, nboot=1000, verbose=TRUE, ...){
fitresult_list <- list()
for(i in 1:nboot){
ntrain <- sum(get_holdout_set(df0, holdout_year) == "train")
bsdf <- rbind(
df0 %>%
filter(get_holdout_set(., holdout_year) == "train") %>%
sample_n(size=ntrain, replace=TRUE),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=FALSE
)
4
4
fit_once <- function(df0, holdout_year, conditions, verbose = TRUE){
df0$set <- get_holdout_set(df0, holdout_year)
df0$pred <- NA
coef_results <- list()
sd_err <- list()
for(cond in conditions){
if(!cond@warn) wrapper <- suppressWarnings else wrapper <- identity
fit <- wrapper(
lm(
cond@formula,
data = df0 %>% filter(condition == cond@name & set == "train")
)
)
sd_err[cond@name] <- sd(fit$residuals)
coef_results[[cond@name]] <- broom::tidy(fit) %>%
mutate(condition=cond@name)
df0$pred[df0$condition == cond@name] <- predict(
fit,
newdata = df0[df0$condition == cond@name,]
)
if(verbose) {
print(sprintf("%s Model", cond@name))
print(wrapper(summary(fit)))
}
}
## this is a noisy estimate, for when we bootstrap
sample <- df0 %>%
filter(set == 'test') %>%
mutate(
pred_samp = pred + rnorm(n(), mean=0, sd=unlist(sd_err[condition]))
) %>%
select(race, sth, condition, pred, pred_samp)
return(new(
"FitResult",
pred=df0[,c("sth", "year", "pred")],
coefs=do.call(rbind, coef_results),
test_sample=sample,
holdout_year=as.integer(holdout_year)
))
}
bootstrap <- function(df0, holdout_year, conditions, nboot=1000, verbose=TRUE, ...){
fitresult_list <- list()
for(i in 1:nboot){
ntrain <- sum(get_holdout_set(df0, holdout_year) == "train")
bsdf <- rbind(
df0 %>%
filter(get_holdout_set(., holdout_year) == "train") %>%
sample_n(size=ntrain, replace=TRUE),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=FALSE
)
warnings()
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=TRUE
)
fn <- function(i) slot(obj_list[[i]], result_slot) %>% mutate(sim=i)
dfs <- list()
for(i in 1:1000) dfs[[i]] <- list(a = data.frame(x=rnorm(100), y=rnorm(100)))
dfs[[1]]
dfs[[1]]@a
for(i in 1:1000) {x <- new("FitResult"); slot(x, "pred") <- data.frame(x=rnorm(100), y=rnorm(100)); dfs[[i]] <- x}
dfs[[1]]
dfs[[1]]@pred
fn
obs_list <- dfs
obj_list <- dfs
sapply(obj_list, slot, "pred")
obj_list[[1]]@pred
do.call(rbind(sapply(obj_list, slot, "pred")))
do.call(rbind, sapply(obj_list, slot, "pred"))
obj_list@preddo.call(rbind, sapply(obj_list, slot, "pred"))
obj_list[[1]]@pred
obj_list@preddo.call(rbind, lapply(obj_list, slot, "pred"))
do.call(rbind, lapply(obj_list, slot, "pred"))
system.time(do.call(rbind, lapply(obj_list, slot, "pred")))
fn
system.time(do.call(rbind, lapply(1:1000, fn)))
system.time(do.call(rbind, lapply(1:1000, fn, "pred")))
fn <- function(i) slot(obj_list[[i]], "pred") %>% mutate(sim=i)
system.time(do.call(rbind, lapply(1:1000, fn)))
system.time(do.call(rbind, lapply(1:1000, fn)))
system.time(do.call(rbind, lapply(1:1000, fn)))
?bind_rows
lapply(obj_list, slot, "pred")
bind_rows(lapply(obj_list, slot, "pred"), .id = "sim")
rbind_slots <- function(obj_list, result_slot){
bind_rows(
lapply(obj_list, slot, result_slot),
.id = sim
)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl)
}
return(bs)
}
bootstrap <- function(df0, holdout_year, conditions, nboot=1000, verbose=TRUE, ...){
fitresult_list <- list()
for(i in 1:nboot){
ntrain <- sum(get_holdout_set(df0, holdout_year) == "train")
bsdf <- rbind(
df0 %>%
filter(get_holdout_set(., holdout_year) == "train") %>%
sample_n(size=ntrain, replace=TRUE),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
rbind_slots <- function(obj_list, result_slot){
bind_rows(
lapply(obj_list, slot, result_slot),
.id = sim
)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl)
}
return(bs)
}
bootstrap <- function(df0, holdout_year, conditions, nboot=1000, verbose=TRUE, ...){
fitresult_list <- list()
for(i in 1:nboot){
ntrain <- sum(get_holdout_set(df0, holdout_year) == "train")
bsdf <- rbind(
df0 %>%
filter(get_holdout_set(., holdout_year) == "train") %>%
sample_n(size=ntrain, replace=TRUE),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=TRUE
)
rbind_slots <- function(obj_list, result_slot){
bind_rows(
lapply(obj_list, slot, result_slot),
.id = "sim"
)
}
construct_bsresult <- function(fitresult_list){
nboot <- length(fitresult_list)
holdout_year <- unique(sapply(fitresult_list, slot, "holdout_year"))
bs <- new("BootstrapResult", nboot=nboot, holdout_year=as.integer(holdout_year))
for(sl in c("pred","coefs","test_sample")){
slot(bs, sl) <- rbind_slots(fitresult_list, sl)
}
return(bs)
}
bootstrap <- function(df0, holdout_year, conditions, nboot=1000, verbose=TRUE, ...){
fitresult_list <- list()
for(i in 1:nboot){
ntrain <- sum(get_holdout_set(df0, holdout_year) == "train")
bsdf <- rbind(
df0 %>%
filter(get_holdout_set(., holdout_year) == "train") %>%
sample_n(size=ntrain, replace=TRUE),
df0 %>% filter(get_holdout_set(., holdout_year) == "test")
)
fitresult_list[[i]] <- fit_once(bsdf, holdout_year, conditions, verbose=FALSE, ...)
if(verbose & (i %% 100 == 0)) print(i)
}
return(
construct_bsresult(fitresult_list)
)
}
bs <- bootstrap(
vote_df,
2016,
conditions,
verbose=TRUE
)
coef_plot <- function(bs, condition_name='contested'){
coef_df <- bs@coefs %>%
filter(condition == condition_name)
ggplot(
coef_df,
aes(x=term, y=estimate)
) +
geom_boxplot() +
theme_sixtysix() +
theme(axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5)) +
ggtitle(
paste("Coefficients of", condition_name),
paste("Holdout:", bs@holdout_year)
)
}
coef_plot(bs, 'contested')
coef_plot(bs, 'uncontested')
gg_race_pred <- function(bs){
holdout_year <- bs@holdout_year
true_results <- bs@pred %>%
filter(year == bs@holdout_year) %>%
supplement_pred(bs@holdout_year)
race_order <- bs@test_sample %>%
group_by(race) %>%
summarise(m = mean(pred_samp)) %>%
with(race[order(m)])
ggplot(
bs@test_sample %>% mutate(race = factor(race, levels = race_order)),
aes(x=race, y=pred_samp)
) +
geom_hline(yintercept=0.5, size=1, color = 'grey30')+
geom_boxplot(outlier.colour = NA, alpha = 0.5)+
geom_point(
data = true_results,
aes(y=sth_pctdem),
color="blue"
) +
theme_sixtysix()+
theme(
panel.grid.major.x = element_blank(),
axis.text.x = element_blank()
) +
xlab("race (sorted by predicted pct dem)") +
scale_y_continuous(breaks = seq(0,1,0.25))+
ggtitle(paste("Race-by-race predictions for", holdout_year), "Blue is actual results.")
}
gg_race_pred(bs)
gg_race_pred <- function(bs){
holdout_year <- bs@holdout_year
true_results <- bs@pred %>%
filter(year == bs@holdout_year) %>%
supplement_pred(bs@holdout_year)
ggplot(
bs@test_sample %>%
group_by(race, sth, condition) %>%
summarise(
ymean = mean(pred_samp),
ymin = quantile(pred_samp, 0.025),
ymax = quantile(pred_samp, 0.975)
) %>%
left_join(true_results),
aes(x=sth_pctdem, y=ymean)
) +
geom_abline(slope=1, size=1, color = 'grey30')+
geom_linerange(
aes(ymin=ymin, ymax=ymax, group=race)
)+
geom_point(
aes(y=ymean, color=condition)
) +
theme_sixtysix()+
xlab("True Result") +
scale_y_continuous("Prediction", breaks = seq(0,1,0.25))+
coord_fixed() +
ggtitle("Race prediction intervals",holdout_year)
}
gg_race_pred(bs)
library(sf)
library(rgeos)
sth_11 <- st_read("data/state_house/tigris_lower_house_2011.shp", quiet=TRUE) %>%
mutate(vintage="<=2012")
sth_15 <- st_read("data/state_house/tigris_lower_house_2015.shp", quiet=TRUE) %>%
mutate(vintage=">2012")
sth_sf <- rbind(sth_11, sth_15) %>% rename(sth = SLDLST)
sth_pts <- mapply(st_centroid, sth_sf$geometry) %>% t
sth_sf <- sth_sf %>% mutate(x=sth_pts[,1], y=sth_pts[,2])
pa_sf <- st_union(sth_sf)
